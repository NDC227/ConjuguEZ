extends Node

# Declare member variables here.

var irr = ["être", "etre", "avoir"]
var irrje = ["sois", "sois", "aie"]
var irrtu = ["sois", "sois", "aies"]
var irril = ["soit", "soit", "ait"]
var irrnous = ["soyons", "soyons", "ayons"]
var irrvous = ["soyez", "soyez", "ayez"]
var irrils = ["soient", "soient", "aient"]

# Called when the node enters the scene tree for the first time.
func _ready():
	$Input.text = Global.text
	$Input.emit_signal("text_changed")
	$SpecialLabel.hide()
	var regex = RegEx.new()
	regex.compile("(.*)(choir|asseoir|saillir)$")
	var needNotes = regex.search(Global.text)
	if needNotes:
		$SpecialLabel.show()


func _on_GoBack_pressed():
	get_tree().change_scene("res://TenseSelect.tscn")
	
func _on_Home_pressed():
	get_tree().change_scene("res://MainMenu.tscn")

func _on_Notes_pressed():
	$NotesCamera.make_current()
	
func _on_NotesBack_pressed():
	$MainCamera.make_current()

func _on_Input_text_changed():
	var regex = RegEx.new()
	var input = $Input.text.to_lower()
	Global.text = input
	var singStem = input.substr(0, input.length()-2)
	var nousStem = singStem
	var vousStem = singStem
	var ilsStem = singStem
	
	if input.length() < 4:
		resetEndings()
		
	elif input in irr:
		$JeConj.text = irrje[irr.find(input)]
		$TuConj.text = irrtu[irr.find(input)]
		$IlConj.text = irril[irr.find(input)]
		$NousConj.text = irrnous[irr.find(input)]
		$VousConj.text = irrvous[irr.find(input)]
		$IlsConj.text = irrils[irr.find(input)]
		
	elif input.ends_with("er"):
		regex.compile("(.*)([aou])(yer)$")
		var result = regex.search(input)
		if result:
			singStem = input.substr(0, input.length()-3) + "i"
			ilsStem = singStem
	
		regex.compile("(.*)(e|é)([a-z])(er)$")
		result = regex.search(input)
		if result:
			singStem = input.substr(0, input.length()-4) + "è" + result.get_string(3)
			ilsStem = singStem
		
		regex.compile("(.*)(e|é)([lt])(er)$")
		result = regex.search(input)
		regex.compile("^(acheter|begueter|bégueter|celer|ciseler|congeler|corseter|crocheter|deceler|déceler|decongeler|décongeler|degeler|dégeler|demanteler|démanteler|ecarteler|écarteler|encasteler|epinceler|épinceler|fileter|fureter|geler|haleter|harceler|marteler|modeler|peler|racheter|receler|regeler|surgeler)$")
		var excep = regex.search(input)
		if result and not excep:
			singStem = input.substr(0, input.length()-2) + result.get_string(3)
			ilsStem = singStem
		
		endings(singStem, nousStem, vousStem, ilsStem)
		reflexive(input, regex)
		
	elif input.ends_with("ir") or input.ends_with("ïr"):
		regex.compile("(.*)(devoir)$") #doive/dev boot
		var devoir = regex.search(input)
		regex.compile("(.*)(pouvoir)$") #puiss irr
		var pouvoir = regex.search(input)
		regex.compile("(.*)(vouloir)$") # veuille/voul boot
		var vouloir = regex.search(input)
		regex.compile("(.*)(savoir)$") #sache irr
		var savoir = regex.search(input)
		regex.compile("(.*)(falloir)$") #faille il (prob fal boot)
		var falloir = regex.search(input)
		regex.compile("(.*)(valoir)$") #vaill/val boot
		var valoir = regex.search(input)
		regex.compile("(.*)(pleuvoir)$") #pleuv
		var pleuvoir = regex.search(input)
		regex.compile("(.*)(gesir|gésir)$") #not used
		var gesir = regex.search(input)
		regex.compile("(.*)(hair|haïr)$") #haïss
		var hair = regex.search(input)
		regex.compile("(.*)(choir)$") #not used
		var choir = regex.search(input)
		regex.compile("(.*)(dorm|ment|part|sent|serv|sort|cour|vet|vêt|bouill|ll|fr|vr)(ir)$") #stem is group 2
		var dormir = regex.search(input)
		regex.compile("(.*)(enir)$") #vienne ven boot
		var enir = regex.search(input)
		regex.compile("(.*)(querir|quérir)$") #acquie (grave) boot
		var querir = regex.search(input)
		regex.compile("(.*)(cevoir)$") #recoive (cedilla) recev boot
		var cevoir = regex.search(input)
		regex.compile("(.*)(mourir)$") #meur mour boot
		var mourir = regex.search(input)
		regex.compile("(.*)(mouvoir)$") #meuv mouv boot
		var mouvoir = regex.search(input)
		regex.compile("(.*)(voir|fuir)$") #voi/voy fui/fuy
		var voir = regex.search(input)
		regex.compile("(.*)(ass)(e?)(oir)$") #assey stem
		var asseoir = regex.search(input)
		
		if devoir:
			singStem = devoir.get_string(1) + "doiv"
			nousStem = devoir.get_string(1) + "dev"
			endings(singStem, nousStem, nousStem, singStem)
			
		elif pouvoir:
			singStem = pouvoir.get_string(1) + "puiss"
			endings(singStem, singStem, singStem, singStem)
			
		elif vouloir:
			singStem = vouloir.get_string(1) + "veuill"
			nousStem = vouloir.get_string(1) + "voul"
			endings(singStem, nousStem, nousStem, singStem)
			
		elif savoir:
			singStem = savoir.get_string(1) + "sach"
			endings(singStem, singStem, singStem, singStem)
			
		elif falloir:
			singStem = falloir.get_string(1) + "faill"
			nousStem = falloir.get_string(1) + "fal"
			endings(singStem, nousStem, nousStem, singStem)
			
		elif valoir:
			singStem = valoir.get_string(1) + "vaill"
			nousStem = valoir.get_string(1) + "val"
			endings(singStem, nousStem, nousStem, singStem)
			
		elif pleuvoir:
			singStem = pleuvoir.get_string(1) + "pleuv"
			endings(singStem, singStem, singStem, singStem)
			
		elif hair:
			singStem = hair.get_string(1) + "haïss"
			endings(singStem, singStem, singStem, singStem)
			
		elif dormir:
			endings(singStem, singStem, singStem, singStem)
			
		elif enir:
			singStem = enir.get_string(1) + "ienn"
			endings(singStem, nousStem, vousStem, singStem)
			
		elif querir:
			singStem = querir.get_string(1) + "quièr"
			endings(singStem, nousStem, vousStem, singStem)
			
		elif cevoir:
			singStem = cevoir.get_string(1) + "çoiv"
			nousStem = cevoir.get_string(1) + "cev"
			endings(singStem, nousStem, nousStem, singStem)
			
		elif mourir:
			singStem = mourir.get_string(1) + "meur"
			endings(singStem, nousStem, vousStem, singStem)
			
		elif mouvoir:
			singStem = mouvoir.get_string(1) + "meuv"
			nousStem = nousStem.substr(0, nousStem.length()-1)
			endings(singStem, nousStem, nousStem, singStem)
			
		elif voir:
			singStem = singStem + "i"
			nousStem = nousStem + "y"
			endings(singStem, nousStem, nousStem, singStem)
			
		elif asseoir:
			singStem = asseoir.get_string(1) + "assey"
			endings(singStem, singStem, singStem, singStem)
			
		else:
			singStem = singStem + "iss"
			endings(singStem, singStem, singStem, singStem)
		
		reflexive(input, regex)
		
	elif input.ends_with("re"):
		regex.compile("(.*)(faire)$") #fass irr
		var faire = regex.search(input)
		regex.compile("(.*)(prendre)$") #prenne/pren boot
		var prendre = regex.search(input)
		regex.compile("(.*)(paitre|paître)$") #paiss stem
		var paitre = regex.search(input)
		regex.compile("(.*)(maudire)$") #maudiss stem
		var maudire = regex.search(input)
		regex.compile("(.*)(ncre)$") #vainqu stem
		var ncre = regex.search(input)
		regex.compile("(.*)(u|d|f|l|fr|conc)(ire)$") #conduise
		var uire = regex.search(input)
		regex.compile("(.*)(crire)$") #criv
		var crire = regex.search(input)
		regex.compile("(.*)([aeo])(indre)$") #joign
		var indre = regex.search(input)
		regex.compile("(.*)(itre|ître)$") #croisse/connaisse
		var itre = regex.search(input)
		regex.compile("(.*)(boire)$") #boive buv boot
		var boire = regex.search(input)
		regex.compile("(.*)(croire|raire)$") #croy on nous and vous
		var croire = regex.search(input)
		regex.compile("(.*)(coudre)$") #cous stem
		var coudre = regex.search(input)
		regex.compile("(.*)(moudre)$") #moul stem
		var moudre = regex.search(input)
		regex.compile("(.*)(clore)$") #clos stem
		var clore = regex.search(input)
		regex.compile("(.*)(soudre)$") #resolve (aigu)
		var soudre = regex.search(input)
		regex.compile("(.*)(aire)$") #plais/tais
		var plaire = regex.search(input)
		
		if faire:
			singStem = faire.get_string(1) + "fass"
			endings(singStem, singStem, singStem, singStem)
			
		elif prendre:
			singStem = prendre.get_string(1) + "prenn"
			nousStem = prendre.get_string(1) + "pren"
			endings(singStem, nousStem, nousStem, singStem)
			
		elif paitre:
			singStem = paitre.get_string(1) + "paiss"
			endings(singStem, singStem, singStem, singStem)
			
		elif maudire:
			singStem = maudire.get_string(1) + "maudiss"
			endings(singStem, singStem, singStem, singStem)
			
		elif ncre:
			singStem = ncre.get_string(1) + "nqu"
			endings(singStem, singStem, singStem, singStem)
			
		elif croire:
			nousStem = nousStem.substr(0, nousStem.length()-1) + "y"
			endings(singStem, nousStem, nousStem, ilsStem)
			
		elif uire or clore or plaire:
			singStem = singStem + "s"
			endings(singStem, singStem, singStem, singStem)
			
		elif crire:
			singStem = singStem + "v"
			endings(singStem, singStem, singStem, singStem)
			
		elif indre:
			singStem = indre.get_string(1) + indre.get_string(2) + "ign"
			endings(singStem, singStem, singStem, singStem)
			
		elif itre:
			singStem = itre.get_string(1) + "iss"
			endings(singStem, singStem, singStem, singStem)
			
		elif boire:
			singStem = boire.get_string(1) + "boiv"
			nousStem = boire.get_string(1) + "buv"
			endings(singStem, nousStem, nousStem, singStem)
			
		elif coudre:
			singStem = coudre.get_string(1) + "cous"
			endings(singStem, singStem, singStem, singStem)
			
		elif moudre:
			singStem = moudre.get_string(1) + "moul"
			endings(singStem, singStem, singStem, singStem)
			
		elif soudre:
			singStem = soudre.get_string(1) + "solv"
			endings(singStem, singStem, singStem, singStem)
		
		reflexive(input, regex)
		
	else:
		resetEndings()
		
	regex.compile("(.*)(choir|asseoir|saillir)$")
	var needNotes = regex.search(input)
	if needNotes:
		$SpecialLabel.show()
		
func reflexive(input, regex):
	regex.compile("(se )(.*)")
	var refl1 = regex.search(input)
	if refl1:
		$JeConj.text = "me" + $JeConj.text.substr(2, $JeConj.text.length())
		$TuConj.text = "te" + $TuConj.text.substr(2, $TuConj.text.length())
		$IlConj.text = "se" + $IlConj.text.substr(2, $IlConj.text.length())
		$NousConj.text = "nous" + $NousConj.text.substr(2, $NousConj.text.length())
		$VousConj.text = "vous" + $VousConj.text.substr(2, $VousConj.text.length())
		$IlsConj.text = "se" + $IlsConj.text.substr(2, $IlsConj.text.length())
	
	regex.compile("(s')(.*)")
	var refl2 = regex.search(input)
	if refl2:
		$JeConj.text = "m'" + $JeConj.text.substr(2, $JeConj.text.length())
		$TuConj.text = "t'" + $TuConj.text.substr(2, $TuConj.text.length())
		$IlConj.text = "s'" + $IlConj.text.substr(2, $IlConj.text.length())
		$NousConj.text = "nous " + $NousConj.text.substr(2, $NousConj.text.length())
		$VousConj.text = "vous " + $VousConj.text.substr(2, $VousConj.text.length())
		$IlsConj.text = "s'" + $IlsConj.text.substr(2, $IlsConj.text.length())

func endings(singStem, nousStem, vousStem, ilsStem):
	$JeConj.text = singStem + "e"
	$TuConj.text = singStem + "es"
	$IlConj.text = singStem + "e"
	$NousConj.text = nousStem + "ions"
	$VousConj.text = vousStem + "iez"
	$IlsConj.text = ilsStem + "ent"

func resetEndings():
	$JeConj.text = "-"
	$TuConj.text = "-"
	$IlConj.text = "-"
	$NousConj.text = "-"
	$VousConj.text = "-"
	$IlsConj.text = "-"
	$SpecialLabel.hide()
